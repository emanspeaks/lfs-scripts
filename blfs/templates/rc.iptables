#!/bin/sh

# Begin rc.iptables

IFACE=eno2 #external interface only

# Insert connection-tracking modules
# (not needed if built into the kernel)
modprobe nf_conntrack
modprobe nf_conntrack_ftp
modprobe xt_conntrack
modprobe xt_LOG
modprobe xt_state

# Set up a default DROP policy for the built-in chains.
# If we modify and re-run the script mid-session then (because we
# have a default DROP policy), what happens is that there is a small
# time period when packets are denied until the new rules are back
# in place. There is no period, however small, when packets we
# don’t want are allowed.
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP

# We want to remove all rules and pre-exisiting user defined
# chains and zero the counters before we implement new rules.
iptables -F
iptables -X
iptables -Z
iptables -t nat -F
iptables -t mangle -F

## ===========================================================
## Some definitions:
BROADCAST="192.168.0.255"
LOOPBACK="127.0.0.0/8"
CLASS_A="10.0.0.0/8"
CLASS_B="172.16.0.0/12"
CLASS_C="192.168.0.0/16"
CLASS_D_MULTICAST="224.0.0.0/4"
CLASS_E_RESERVED_NET="240.0.0.0/5"
P_PORTS="0:1023"
UP_PORTS="1024:65535"
TR_SRC_PORTS="32769:65535"
TR_DEST_PORTS="33434:33523"

## ============================================================
## Kernel flags
# To dynamically change kernel parameters and variables on the fly you need
# CONFIG_SYSCTL defined in your kernel.

# Disable response to ping.
#/bin/echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_all

# Disable response to broadcasts.
# You don’t want yourself becoming a Smurf amplifier.
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# Don’t accept source routed packets. Attackers can use source
# routing to generate traffic pretending to be from inside your
# network, but which is routed back along the path from which it
# came, namely outside, so attackers can compromise your
# network. Source routing is rarely used for legitimate purposes.
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route

# Enable TCP SYN Cookie Protection
echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# Disable ICMP redirect acceptance. ICMP redirects can be used to
# alter your routing tables, possibly to a bad end.
echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/accept_redirects

# Do not send Redirect Messages
echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects

# Drop Spoofed Packets coming in on an interface, where responses
# would result in the reply going out a different interface.
echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
echo 1 > /proc/sys/net/ipv4/conf/default/rp_filter

# Enable bad error message protection.
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses

# Log spoofed packets, source routed packets, redirect packets.
echo 1 > /proc/sys/net/ipv4/conf/all/log_martians
echo 1 > /proc/sys/net/ipv4/conf/default/log_martians

# Make sure that IP forwarding is turned off. We only want this
# for a multi-homed host used as a router.
echo 0 > /proc/sys/net/ipv4/ip_forward

# be verbose on dynamic ip-addresses  (not needed in case of static IP)
echo 2 > /proc/sys/net/ipv4/ip_dynaddr

# disable Explicit Congestion Notification
# too many routers are still ignorant
echo 0 > /proc/sys/net/ipv4/tcp_ecn

## ============================================================
# RULES

## LOOPBACK
# Allow unlimited traffic on the loopback interface.
#iptables -A INPUT  -i lo -j ACCEPT
#iptables -A OUTPUT -o lo -j ACCEPT

## free traffic on all but external interface
iptables -A INPUT  ! -i $IFACE -j ACCEPT
iptables -A OUTPUT ! -o $IFACE -j ACCEPT

## Let the package through early if we are already established
iptables -A INPUT  -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

## Free output on external interface
#iptables -A OUTPUT -i $IFACE -j ACCEPT

## drop invalid packets or scans
iptables -A INPUT -i $IFACE -p tcp -m conntrack --ctstate INVALID -j LOG --log-prefix "FIREWALL:INVALID "
iptables -A INPUT -i $IFACE -p tcp -m conntrack --ctstate INVALID -j DROP

# SYN-FLOODING PROTECTION
# This rule maximizes the rate of incoming connections. In order to
# do this we divert tcp packets with the SYN bit set off to a
# user-defined chain. Up to limit-burst connections can arrive in
# 1/limit seconds ..... in this case 4 connections in one second.
# After this, one of the burst is regained every second and connections
# are allowed again. The default limit is 3/hour. The default limit
# burst is 5.
iptables -N syn-flood
iptables -A syn-flood -m limit --limit 1/s --limit-burst 4 -j RETURN
iptables -A syn-flood -j DROP
iptables -A INPUT -i $IFACE -p tcp --syn -j syn-flood

## Make sure NEW tcp connections are SYN packets
iptables -A INPUT -i $IFACE -p tcp ! --syn -m state --state NEW -j DROP

## FRAGMENTS
# Sending lots of non-first fragments was what allowed Jolt2
# to effectively "drown" Firewall-1. Fragments can be overlapped,
# and the subsequent interpretation of such fragments is very
# OS-dependent (see this paper for details).
# Don’t trust any fragments.
# Log fragments just to see if we get any, and deny them too.
iptables -A INPUT -i $IFACE -f -j LOG --log-prefix "IPTABLES FRAGMENTS: " --log-level 6
iptables -A INPUT -i $IFACE -f -j DROP

## SPOOFING
# Most of this anti-spoofing stuff is theoretically not really
# necessary with the flags we have set in the kernel above
# but you never know there isn’t a bug somewhere in your IP stack.
# Refuse packets claiming to be from a Class A private network.
iptables -A INPUT -i $IFACE -s $CLASS_A -j DROP
# Refuse packets claiming to be from a Class B private network.
iptables -A INPUT -i $IFACE -s $CLASS_B -j DROP
# We are on a Class C network, but external interface isn't
iptables -A INPUT -i $IFACE -s $CLASS_C -j DROP
# Refuse Class D multicast addresses. Multicast is illegal as a
# source address. We also drop legal multicast destination so we
# don’t log them later.
iptables -A INPUT -i $IFACE -s $CLASS_D_MULTICAST -j DROP
iptables -A INPUT -i $IFACE -d $CLASS_D_MULTICAST -j DROP
# Refuse Class E reserved IP addresses.
iptables -A INPUT -i $IFACE -s $CLASS_E_RESERVED_NET -j DROP
# Refuse packets claiming to be to the loopback interface.
# Refusing packets claiming to be to the loopback interface
# protects against source quench, whereby a machine can be told
# to slow itself down by an icmp source quench to the loopback.
iptables -A INPUT -i $IFACE -d $LOOPBACK -j DROP

## DNS
# NOTE: DNS uses tcp for zone transfers, for transfers greater
# than 512 bytes (possible, but unusual -- so we deny it),
iptables -A INPUT  -i $IFACE -p udp --dport 53 -j ACCEPT
iptables -A OUTPUT -o $IFACE -p udp -j ACCEPT
#NAMESERVER_1=200.0.0.2
#iptables -A INPUT  -i $IFACE -p tcp -s $NAMESERVER_1 --sport 53 -j ACCEPT
#iptables -A OUTPUT -o $IFACE -p tcp -s $NAMESERVER_1 --dport 53-j ACCEPT

## HTTP(S)
iptables -A INPUT  -i $IFACE -p tcp --dport 80  -m state --state NEW -j ACCEPT
iptables -A INPUT  -i $IFACE -p tcp --dport 443 -m state --state NEW -j ACCEPT

## SSH
# Allow ssh both ways on all interfaces
iptables -A INPUT  -p tcp --dport 22 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT

## NTP
iptables -A INPUT  -i $IFACE -p udp --dport 123 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -o $IFACE -p udp --dport 123 -m state --state NEW -j ACCEPT

## SMTP
# Allow smtp outbound to our mail server.
#MAILSERVER=192.168.0.10
#iptables -A OUTPUT -o $IFACE -p tcp -d $MAILSERVER --dport 25 -m state --state NEW -j ACCEPT

## AUTH server
# Reject ident probes with a tcp reset.
# Needed for a mail host that won’t accept or delays
# mail if we just drop its ident probe.
iptables -A INPUT -i $IFACE -p tcp --dport 113 -j REJECT --reject-with tcp-reset

## ICMP
# We accept some icmp requests including pings
iptables -A INPUT -i $IFACE -p icmp --icmp-type destination-unreachable -j ACCEPT
iptables -A INPUT -i $IFACE -p icmp --icmp-type time-exceeded -j ACCEPT
iptables -A INPUT -i $IFACE -p icmp --icmp-type echo-request -j ACCEPT
iptables -A INPUT -i $IFACE -p icmp --icmp-type echo-reply -j ACCEPT
# We always allow icmp out.
iptables -A OUTPUT -o $IFACE -p icmp -j ACCEPT

## NETBIOS
NETBIOS=137:139
iptables -A INPUT -i $IFACE -p udp --dport $NETBIOS -j DROP
# Other stuff from MS we don’t want to log
iptables -A INPUT -i $IFACE -p tcp --dport 445 -j DROP
iptables -A INPUT -i $IFACE -p tcp --dport 135 -j DROP
iptables -A INPUT -i $IFACE -p tcp --dport 1433 -j DROP
# After smb, we can now refuse broadcast address packets.
iptables -A INPUT -i $IFACE -d $BROADCAST -j LOG --log-level 6
iptables -A INPUT -i $IFACE -d $BROADCAST -j DROP

## LOGGING
# You don’t have to split up your logging like we do below,
# but this way we can grep for things in the logs more easily.

# Any udp not already allowed is logged and then dropped.
iptables -A INPUT  -i $IFACE -p udp -j LOG --log-prefix "IPTABLES UDP-IN: " --log-level 6
iptables -A INPUT  -i $IFACE -p udp -j DROP
iptables -A OUTPUT -o $IFACE -p udp -j LOG --log-prefix "IPTABLES UDP-OUT: " --log-level 6
iptables -A OUTPUT -o $IFACE -p udp -j DROP

# Any icmp not already allowed is logged and then dropped.
iptables -A INPUT  -i $IFACE -p icmp -j LOG --log-prefix "IPTABLES ICMP-IN: " --log-level 6
iptables -A INPUT  -i $IFACE -p icmp -j DROP
iptables -A OUTPUT -o $IFACE -p icmp -j LOG --log-prefix "IPTABLES ICMP-OUT: " --log-level 6
iptables -A OUTPUT -o $IFACE -p icmp -j DROP

# Any tcp not already allowed is logged and then dropped.
iptables -A INPUT  -i $IFACE -p tcp -j LOG --log-prefix "IPTABLES TCP-IN: " --log-level 6
iptables -A INPUT  -i $IFACE -p tcp -j DROP
iptables -A OUTPUT -o $IFACE -p tcp -j LOG --log-prefix "IPTABLES TCP-OUT: " --log-level 6
iptables -A OUTPUT -o $IFACE -p tcp -j DROP

# Anything else not already allowed is logged and then dropped.
# It will be dropped by the default policy anyway ........
# but let’s be paranoid.
iptables -A INPUT  -i $IFACE -j LOG --log-prefix "IPTABLES PROTOCOL-X-IN: " --log-level 6
iptables -A INPUT  -i $IFACE -j DROP
iptables -A OUTPUT -o $IFACE -j LOG --log-prefix "IPTABLES PROTOCOL-X-OUT: " --log-level 6
iptables -A OUTPUT -o $IFACE -j DROP

# End rc.iptables
